<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise game variables

randomize();

// The game's core state
// This will update depending on what situation the player gets into
// 0 - [Scene] Menu
// 1 - [Animation] Menu to character select
// 2 - [Scene] Character select
// 3 - [Animation] Character select to conversation
// 4 - [Scene] Conversation
// 5 - [Animation] Conversation to character select
// 6 - [Scene] Douche detection
// 7 - [Scene] Ending
gameState = 0;

// Sin wave incremental
n = 0;

// Generic sprite speed
spriteSpeed = 0.2;

// Generic transition speed
transitionSpeed = 4;

// Generic blinking rate
blinkRate = 300;

// Start playing that music!
if (!audio_is_playing(sndBackground)) {
    audio_play_sound(sndBackground, 0, true);
    audio_play_sound(sndAmbience, 0, true);
}

// ========================================================================
// Menu
// ========================================================================

// Menu sprite index
menuIndex = 0;

// Menu sprite vertical position
menuPosition = 0;

// ========================================================================
// Characters
// ========================================================================

// Character vertical positions
charPosition = room_height;

// Character sprites
charSprites = ds_list_create();
ds_list_add(charSprites, sprRocker, sprNerd, sprLad, sprJoker);

// Character sprite indexes
charIndexes = ds_list_create();
ds_list_add(charIndexes,
    random_range(0, blinkRate / 2),
    random_range(0, blinkRate / 2),
    random_range(0, blinkRate / 2),
    random_range(0, blinkRate / 2)
);

// Character bob offsets
charBobOffsets = ds_list_create();
ds_list_add(charBobOffsets,
    random_range(0, 360),
    random_range(0, 360),
    random_range(0, 360),
    random_range(0, 360)
);

// Character bob rates
charBobRates = ds_list_create();
ds_list_add(charBobRates,
    1,
    1,
    1,
    1
);

// The selected character index
// -1 = no selection
selectedChar = -1;

// ========================================================================
// Conversation
// ========================================================================

// Whether or not the character is talking
isTalking = false;

// Whether or not the character is laughing
isLaughing = false;

// A timer for the talk animation
talkTimer = 0;

// How long the talking animation goes on for
talkTime = 20;

// List of character phrases
phrases = ds_list_create();
ds_list_add(phrases,
    ds_list_create(),
    ds_list_create(),
    ds_list_create(),
    ds_list_create()
);

// Detection messages
detectionPhrases = ds_list_create();

define_phrases();

// The current phrase the player is on
currentPhrase = 0;

// The string length of the current phrase for the typewriter effect
phraseLength = 0;

// The current answer the player is over
// -1 = no selection
selectedAnswer = -1;

// Whether the player can choose an answer
canChooseAnswer = false;

// How much of a douchebag you're being
// - Some characters will need you to be douchey to convince them
// - Others will see you're being a fake douche
// - This resets per conversation
douchebagPoints = 0;

// The maximum points you can get
maxDouchePoints = 4;

// Character douche detection ranges
// If douchebagPoints go out of range here then they'll call you out
doucheDetections = ds_list_create();
set_douche_detection(-2, 1);
set_douche_detection(-3, 1);
set_douche_detection(-1, 3);
set_douche_detection(-1, 2);

// Whether they've detected you're faking it (over max douchebag points)
didDetectFake = false;

// Whether they've detected you're sober (under min douchebag points)
didDetectSober = false;

// Completion status of each character
// When these all are true, you win
completions[0] = false;
completions[1] = false;
completions[2] = false;
completions[3] = false;

// Whether a gameover occurred
gameover = false;

// The answer bubble effect
answerBubbleHeight = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>sprCursor</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Graphical effects

n += 1;

if (has_characters()) {
    for (var i = 0; i &lt; 4; i += 1) {

        // Character blinking
        var charIndex = ds_list_find_value(charIndexes, i);
        charIndex += 1;
        if (charIndex &gt; blinkRate) {
            charIndex = random_range(0, blinkRate / 2);
        }
        ds_list_replace(charIndexes, i, charIndex);

        // Character bobbing
        var bobRate = ds_list_find_value(charBobRates, i);
        var bobOffset = ds_list_find_value(charBobOffsets, i);
        var bobRateTarget = bob(0.05, 2, bobOffset);
        if (isTalking &amp;&amp; selectedChar == i) {
            bobRateTarget = bob(0.2, 2, bobOffset);
        } else if (isLaughing) {
            bobRateTarget = bob(0.3, 10, bobOffset);
        }
        bobRate += (bobRateTarget - bobRate) / 10;
        ds_list_replace(charBobRates, i, bobRate);
    }
}

if (gameState == 4 || gameState == 6) {

    // Talking
    if (isTalking &amp;&amp; talkTimer &lt; talkTime) {
        talkTimer += 1;
    } else {
        talkTimer = 0;
    }

    // Typewriter effect
    canChooseAnswer = false;
    var message = '';
    if (gameState == 4) {
        message = get_char_question(selectedChar, currentPhrase);
    } else if (gameState == 6) {
        var detectionType = 0;
        if (didDetectFake) {
            detectionType = 1;
        }
        message = get_detection_message(selectedChar, detectionType);
    }
    
    if (phraseLength &lt; string_length(message)) {
        phraseLength += 0.3;
        isTalking = true;
    } else {
        canChooseAnswer = true;
        isTalking = false;
    }
    
    // Answer bubbles
    answerBubbleHeight = clamp(answerBubbleHeight, 0, 1);
    if (canChooseAnswer &amp;&amp; answerBubbleHeight &lt; 1) {
        answerBubbleHeight += 0.2;
    }

}

// Ending
if (gameState == 7) {
    isTalking = false;
    
    if (gameover) {
        isLaughing = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Audio effects

// Menu sounds
if (gameState == 1) {
    if (menuIndex == 4) {
        audio_play_sound(sndClink, 0, false);
    } else if (menuIndex == 7) {
        audio_play_sound(sndSlurp, 0, false);
    } else if (menuIndex == 13) {
        audio_play_sound(sndDonk, 0, false);
    }
}

// Talking sounds
if (has_characters()) {
    if (isTalking &amp;&amp; talkTimer == talkTime / 2) {
        switch (selectedChar) {
            case 0:
                var talk = audio_play_sound(choose(sndRocker1, sndRocker2, sndRocker3, sndRocker4), 0, false);
                audio_sound_pitch(talk, random_range(1.1, 1.3));
                break;
            case 1:
                var talk = audio_play_sound(choose(sndNerd1, sndNerd2, sndNerd3, sndNerd4), 0, false);
                audio_sound_pitch(talk, random_range(1.1, 1.3));
                break;
            case 2:
                var talk = audio_play_sound(choose(sndLad1, sndLad2, sndLad3, sndLad4), 0, false);
                audio_sound_pitch(talk, random_range(1.1, 1.3));
                break;
            case 3:
                var talk = audio_play_sound(choose(sndJoker1, sndJoker2, sndJoker3, sndJoker4), 0, false);
                audio_sound_pitch(talk, random_range(1.1, 1.3));
                break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations

// [Animation] Menu to character select
if (gameState == 1) {
    if (menuPosition &lt;= room_height) {
        if (menuIndex &lt; 18) {
            menuIndex += spriteSpeed;
        } else {
            menuPosition += transitionSpeed;
            charPosition = max(0, room_height - menuPosition);
        }
    } else {
        gameState = 2;
    }
}

// [Animation] Character select to conversation
if (gameState == 3) {
    if (charPosition &lt;= room_height) {
        charPosition += transitionSpeed;
    } else {
        gameState = 4;
    }
}

// [Animation] Conversation to character select
if (gameState == 5) {
    if (charPosition &gt; 0) {
        charPosition -= transitionSpeed;
        charPosition = max(0, charPosition);
    } else {
        gameState = 2;
    }
}

// [Scene] Ending
if (gameState == 7) {
    if (charPosition &gt; 0) {
        charPosition -= transitionSpeed;
        charPosition = max(0, charPosition);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logical events

// [Scene] Character select
if (gameState == 2) {
    selectedChar = -1;
    var padding = 20;
    for (var i = 0; i &lt; 4 i += 1) {
        var xPos = character_x_position(i);
        if (mouse_bounds(xPos - padding, xPos + padding, 32, 96) &amp;&amp; !completions[i]) {
            selectedChar = i;
            douchebagPoints = 0;
            phraseLength = 0;
            canChooseAnswer = false;
            selectedAnswer = -1;
        }
    }
}

// [Scene] Conversation
if (gameState == 4) {
    var charPhrases = ds_list_find_value(phrases, selectedChar);
    
    // Faker/sober detection
    var detectRange = ds_list_find_value(doucheDetections, selectedChar);
    if (douchebagPoints &gt; detectRange[1]) {
        didDetectFake = true;
    } else if (douchebagPoints &lt; detectRange[0]) {
        didDetectSober = true;
    }
    
    if (!didDetectFake &amp;&amp; !didDetectSober) {

        // Exit a conversation
        if (currentPhrase &gt;= ds_list_size(charPhrases)) {
            currentPhrase = 0;
            completions[selectedChar] = true;
            gameState = 5;
            
            // Check for victory condition
            var didWin = true;
            for (var i = 0; i &lt; 4; i += 1) {
                if (!completions[i]) {
                    didWin = false;
                }
            }
            if (didWin) {
                gameState = 7;
                audio_play_sound(sndVictory, 0, false);
            }
        }
        
        // Selecting an answer
        selectedAnswer = -1;
        var hpadding = 30;
        var vpadding = 20;
        for (var i = 0; i &lt; 3 i += 1) {
            var xPos = answer_x_position(i);
            var yPos = 110;
            if (mouse_bounds(xPos - hpadding, xPos + hpadding, yPos - vpadding, yPos + vpadding) &amp;&amp; canChooseAnswer) {
                selectedAnswer = i;
            }
        }
    
    // Calling out    
    } else {
        gameState = 6;
        phraseLength = 0;
        canChooseAnswer = false;
        gameover = true;
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle click event

switch (gameState) {

    // [Scene] Menu
    case 0:
        gameState = 1;
        break;

    // [Scene] Character select
    case 2:
        if (selectedChar != -1) {
            gameState = 3;
            var hey = audio_play_sound(choose(sndHey1, sndHey2, sndHey3, sndHey4, sndHey5), 0, false);
            audio_sound_pitch(hey, random_range(1.1, 1.3));
        }
        break;

    // [Scene] Conversation
    case 4:
        if (selectedAnswer != -1) {
            var answer = get_char_answer(selectedChar, currentPhrase, selectedAnswer);
            douchebagPoints += answer[1];
            douchebagPoints = clamp(douchebagPoints, -maxDouchePoints, maxDouchePoints);
            show_debug_message('Got ' + string(answer[1]) + ' points, now on ' + string(douchebagPoints));
            currentPhrase += 1;
            phraseLength = 0;
            answerBubbleHeight = 0;
            var hey = audio_play_sound(sndSelect, 0, false);
            audio_sound_pitch(hey, random_range(1, 1.3));
        }
        break;
        
    // [Scene] Douche detection
    case 6:
        if (canChooseAnswer) {
            gameState = 7;
            audio_play_sound(sndGameover, 0, false);
        }
        break;
        
    case 7:
        room_restart();
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw game

// Darkener
draw_set_alpha((charPosition / room_height) * 0.5);
draw_set_color(c_black);
draw_rectangle(0, 0, room_width, room_height, false);

// Font
draw_set_alpha(1);
draw_set_font(fntMain);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
texture_set_interpolation(false);

if (has_characters()) {

    // Characters
    for (var i = 0; i &lt; 4 i += 1) {
        var charX = character_x_position(i);
        var charY = charPosition;
        var bobRate = ds_list_find_value(charBobRates, i);
        var bobOffset = ds_list_find_value(charBobOffsets, i);
        var charIndex = clamp(ds_list_find_value(charIndexes, i) - blinkRate + 10, 0, 1);
        if (isLaughing) {
            charIndex = 3;
        }

        // Selected character
        if (selectedChar == i &amp;&amp; gameState != 2) {
            charX = character_x_position(i) + (
                (charPosition / room_height) * ((room_width / 2) - character_x_position(i))
            );
            charY = 0;
            if (isTalking) {
                if (talkTimer &lt; talkTime / 2) {
                    charIndex = 2;
                } else {
                    charIndex = 0;
                }
            }
        }

        draw_sprite_ext(
            ds_list_find_value(charSprites, i),
            charIndex,
            charX,
            room_height + charY + 4 + bob(0.1, 2, bobOffset),
            1, 1,
            bobRate,
            c_white, 1
        );
    }
    
    // Character select prompt text
    if (gameState == 2) {
        draw_set_color(c_white);
        var isNewGame = true;
        for (var i = 0; i &lt; 4 i += 1) {
            if (completions[i]) {
                isNewGame = false;
            }
        }
        if (isNewGame) {
            draw_text(room_width / 2, 20, "Convince them you're totally 'drunk'");
        }
        if (selectedChar != -1) {
            draw_sprite_ext(sprPrompt, 0, mouse_x, mouse_y, 1, 1, bob(0.25, 5, 0), c_white, 1);
        }
    }
    
    // Conversation text
    if (gameState == 4) {
        var charPhrases = ds_list_find_value(phrases, selectedChar);
        var phrase = ds_list_find_value(charPhrases, currentPhrase);

        // Question
        draw_sprite_ext(sprBubble, 0, room_width / 2, 24, 1, min(1, phraseLength / 5), bob(0.1, 1, 0), c_white, 1);
        var question = get_char_question(selectedChar, currentPhrase);
        draw_set_color(c_black);
        draw_text_transformed(room_width / 2, 20, string_copy(question, 0, ceil(phraseLength)), 1, 1, bob(0.1, 1, 0));

        // Answers
        if (canChooseAnswer) {
            for (var i = 0; i &lt; 3; i += 1) {
                var answer = get_char_answer(selectedChar, currentPhrase, i);
                var answerX = answer_x_position(i);
                var answerY = 110;
                draw_sprite_ext(sprSmallBubble, 0, answerX, answerY, 1, answerBubbleHeight, bob(0.1, 1, answerX), c_white, 1);
                draw_text_transformed(answerX, answerY, answer[0], 1, 1, bob(0.1, 1, answerX));
            }
        }
        
        // Prompt
        if (selectedAnswer != -1) {
            draw_sprite_ext(sprPrompt, 0, mouse_x, mouse_y, 1, 1, bob(0.25, 5, 0), c_white, 1);
        }
    }
    
    // Call out text
    if (gameState == 6) {
        var detectionType = 0;
        if (didDetectFake) {
            detectionType = 1;
        }
        var message = get_detection_message(selectedChar, detectionType);
        draw_sprite_ext(sprBubble, 0, room_width / 2, 24, 1, min(1, phraseLength / 5), bob(0.1, 1, 0), c_white, 1);
        draw_set_color(c_black);
        draw_text_transformed(room_width / 2, 20, string_copy(message, 0, ceil(phraseLength)), 1, 1, bob(0.1, 1, 0));
    }

}

// Menu
if (has_menu()) {
    draw_sprite(sprMenu, menuIndex, 0, menuPosition);
    draw_sprite(sprLogo, 0, 0, 4 + menuPosition + bob(0.04, 4, 0));
}

// Ending
if (gameState == 7) {
    draw_set_alpha(((room_height - charPosition) / room_height) * 0.5);
    draw_set_color(c_black);
    draw_rectangle(0, 0, room_width, room_height, false);
    draw_set_color(c_white);
    draw_set_alpha(((room_height - charPosition) / room_height));
    if (gameover) {
        draw_sprite_ext(sprGameover, 0, room_width / 2, room_height * 0.4, 1, 1, bob(0.2, 5, 0), c_white, 1);
        draw_text(room_width / 2, room_height * 0.8, "What a loser! You couldn't fool them.");
    } else {
        draw_sprite_ext(sprVictory, 0, room_width / 2, room_height * 0.4, 1, 1, bob(0.2, 5, 0), c_white, 1);
        draw_text(room_width / 2, room_height * 0.8, "Four new friends on Facebook! Jackpot.");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
