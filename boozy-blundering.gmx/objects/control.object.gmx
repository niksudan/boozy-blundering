<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise game variables

// The game's core state
// This will update depending on what situation the player gets into
// 0 - [Scene] Menu
// 1 - [Animation] Menu to character select
// 2 - [Scene] Character select
// 3 - [Animation] Character select to conversation
// 4 - [Scene] Conversation
// 5 - [Animation] Conversation to character select
// 6 - [Scene] Gameover
// 7 - [Scene] Victory
gameState = 0;

// Sin wave incremental
n = 0;

// Generic sprite speed
spriteSpeed = 0.2;

// Generic transition speed
transitionSpeed = 4;

// Generic blinking rate
blinkRate = 300;

// ========================================================================
// Menu
// ========================================================================

// Menu sprite index
menuIndex = 0;

// Menu sprite vertical position
menuPosition = 0;

// ========================================================================
// Characters
// ========================================================================

// Character vertical positions
charPosition = room_height;

// Character sprites
charSprites = ds_list_create();
ds_list_add(charSprites, sprRocker, sprNerd, sprLad, sprJoker);

// Character sprite indexes
charIndexes = ds_list_create();
ds_list_add(charIndexes,
    random_range(0, blinkRate / 2),
    random_range(0, blinkRate / 2),
    random_range(0, blinkRate / 2),
    random_range(0, blinkRate / 2)
);

// Character bob offsets
charBobOffsets = ds_list_create();
ds_list_add(charBobOffsets,
    random_range(0, 360),
    random_range(0, 360),
    random_range(0, 360),
    random_range(0, 360)
);

// Character bob rates
charBobRates = ds_list_create();
ds_list_add(charBobRates,
    1,
    1,
    1,
    1
);

// The selected character index
// -1 = no selection
selectedChar = -1;

// ========================================================================
// Conversation
// ========================================================================

// Whether or not the character is talking
isTalking = false;

// Whether or not the character is laughing
isLaughing = false;

// A timer for the talk animation
talkTimer = 0;

// How long the talking animation goes on for
talkTime = 20;

// List of character phrases
phrases = ds_list_create();
ds_list_add(phrases,
    ds_list_create(),
    ds_list_create(),
    ds_list_create(),
    ds_list_create()
);
define_phrases();

// The current phrase the player is on
currentPhrase = 0;

// The string length of the current phrase for the typewriter effect
phraseLength = 0;

// The current answer the player is over
// -1 = no selection
selectedAnswer = -1;

// Whether the player can choose an answer
canChooseAnswer = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Graphical effects

n += 1;

if (has_characters()) {
    for (var i = 0; i &lt; 4; i += 1) {

        // Character blinking
        var charIndex = ds_list_find_value(charIndexes, i);
        charIndex += 1;
        if (charIndex &gt; blinkRate) {
            charIndex = random_range(0, blinkRate / 2);
        }
        ds_list_replace(charIndexes, i, charIndex);

        // Character bobbing
        var bobRate = ds_list_find_value(charBobRates, i);
        var bobOffset = ds_list_find_value(charBobOffsets, i);
        var bobRateTarget = bob(0.05, 2, bobOffset);
        if (isTalking &amp;&amp; selectedChar == i) {
            bobRateTarget = bob(0.2, 2, bobOffset);
        } else if (isLaughing) {
            bobRateTarget = bob(0.3, 10, bobOffset);
        }
        bobRate += (bobRateTarget - bobRate) / 10;
        ds_list_replace(charBobRates, i, bobRate);
    }
}

if (gameState == 4) {

    // Conversation talking
    if (isTalking &amp;&amp; talkTimer &lt; talkTime) {
        talkTimer += 1;
    } else {
        talkTimer = 0;
    }
    
    // Conversation typewriter effect
    canChooseAnswer = false;
    var charPhrases = ds_list_find_value(phrases, selectedChar);
    var phrase = ds_list_find_value(charPhrases, currentPhrase);
    var question = ds_list_find_value(phrase, 0);
    if (phraseLength &lt; string_length(question)) {
        phraseLength += 0.5;
    } else {
        canChooseAnswer = true;
    }

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations

// [Animation] Menu to character select
if (gameState == 1) {
    if (menuPosition &lt;= room_height) {
        if (menuIndex &lt; 18) {
            menuIndex += spriteSpeed;
        } else {
            menuPosition += transitionSpeed;
            charPosition = max(0, room_height - menuPosition);
        }
    } else {
        gameState = 2;
    }
}

// [Animation] Character select to conversation
if (gameState == 3) {
    if (charPosition &lt;= room_height) {
        charPosition += transitionSpeed;
    } else {
        gameState = 4;
    }
}

// [Animation] Conversation to character select
if (gameState == 5) {
    if (charPosition &gt; 0) {
        charPosition -= transitionSpeed;
        charPosition = max(0, charPosition);
    } else {
        gameState = 2;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logical events

// [Scene] Character select
if (gameState == 2) {
    selectedChar = -1;
    var padding = 20;
    for (var i = 0; i &lt; 4 i += 1) {
        var xPos = character_x_position(i);
        if (mouse_bounds(xPos - padding, xPos + padding, 32, 96)) {
            selectedChar = i;
        }
    }
}

// [Scene] Conversation
if (gameState == 4) {
    var charPhrases = ds_list_find_value(phrases, selectedChar);
    
    // Returning to character select
    if (currentPhrase &gt;= ds_list_size(charPhrases)) {
        currentPhrase = 0;
        gameState = 5;
    }
    
    // Selecting an answer
    selectedAnswer = -1;
    var padding = 20;
    for (var i = 0; i &lt; 3 i += 1) {
        var xPos = answer_x_position(i);
        var yPos = 100;
        if (mouse_bounds(xPos - padding, xPos + padding, yPos - padding, yPos + padding) &amp;&amp; canChooseAnswer) {
            selectedAnswer = i;
        }
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle click event

switch (gameState) {

    // [Scene] Menu
    case 0:
        gameState = 1;
        break;

    // [Scene] Character select
    case 2:
        if (selectedChar != -1) {
            gameState = 3;
        }
        break;

    // [Scene] Conversation
    case 4:
        if (selectedAnswer != -1) {
            currentPhrase += 1;
            phraseLength = 0;
        }
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw UI elements

// Darkener
draw_set_alpha((charPosition / room_height) * 0.5);
draw_set_color(c_black);
draw_rectangle(0, 0, room_width, room_height, false);

// Font
draw_set_alpha(1);
draw_set_color(c_white);
draw_set_font(fntMain);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
texture_set_interpolation(false);

if (has_characters()) {

    // Characters
    for (var i = 0; i &lt; 4 i += 1) {
        var charX = character_x_position(i);
        var charY = charPosition;
        var bobRate = ds_list_find_value(charBobRates, i);
        var bobOffset = ds_list_find_value(charBobOffsets, i);
        var charIndex = clamp(ds_list_find_value(charIndexes, i) - blinkRate + 10, 0, 1)

        // Selected character
        if (selectedChar == i &amp;&amp; gameState != 2) {
            charX = character_x_position(i) + (
                (charPosition / room_height) * ((room_width / 2) - character_x_position(i))
            );
            charY = 0;
            if (isTalking) {
                if (talkTimer &lt; talkTime / 2) {
                    charIndex = 2;
                } else {
                    charIndex = 0;
                }
            } else if (isLaughing) {
                charIndex = 3;
            }
        }

        draw_sprite_ext(
            ds_list_find_value(charSprites, i),
            charIndex,
            charX,
            room_height + charY + 4 + bob(0.1, 2, bobOffset),
            1, 1,
            bobRate,
            c_white, 1
        );
    }
    
    // Character select prompt text
    if (gameState == 2) {
        draw_text(room_width / 2, 20, "Now convince them you're drunk");
        if (selectedChar != -1) {
            draw_text(mouse_x, mouse_y - 6, "Talk");
        }
    }
    
    // Conversation text
    if (gameState == 4) {
        var charPhrases = ds_list_find_value(phrases, selectedChar);
        var phrase = ds_list_find_value(charPhrases, currentPhrase);

        // Question
        var question = ds_list_find_value(phrase, 0);
        draw_text(room_width / 2, 20, string_copy(question, 0, ceil(phraseLength)));

        // Answers
        if (canChooseAnswer) {
            for (var i = 0; i &lt; 3; i += 1) {
                var answerX = answer_x_position(i);
                var answerY = 100;
                draw_text(answerX, answerY, ds_list_find_value(phrase, i + 1));
            }
        }
    
        // Prompt
        if (selectedAnswer != -1) {
            draw_text(mouse_x, mouse_y - 6, "Say this");
        }
    }

}

// Menu
if (has_menu()) {
    draw_sprite(sprMenu, menuIndex, 0, menuPosition);
    draw_sprite(sprLogo, 0, 0, 4 + menuPosition + bob(0.04, 4, 0));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
